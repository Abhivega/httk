#!/bin/bash

DIRNAME="$(dirname "$0")"
HTTK_BIN_PATH="$(cd "$DIRNAME"; pwd -P)"
. "${HTTK_BIN_PATH}/internal/setup.sh"

PROJECT="$HTTK_PROJECT_NAME"

PIPE="$1"
PIPEPATH1="$HTTK_PROJECT_DIR/ht.project/computers/$PIPE/"
PIPEPATH2="$HTTK_USER_HOME/computers/$PIPE/"
shift 1

if [ -d "$PIPEPATH1" ]; then
    PIPEPATH=$PIPEPATH1
elif [-d "$PIPEPATH2" ]; then
    PIPEPATH=$PIPEPATH2
else
    echo "Unknown computer: $PIPE"
    echo "(Please configure with httk-setup-computer <name>)"
    exit 1
fi

echo "==== httk-tasks-receive-from-computer"
echo "Current project: $HTTK_PROJECT_NAME ($HTTK_PROJECT_DIR)"

cd "$HTTK_PROJECT_DIR"

echo "==== Fetching information about tasks to pull"
if [ "$1" != "" ]; then
    (for DIR in "$@"; do
	find "$HTTK_REL_DIR/$DIR" -name "ht.task.$PIPE.*" 
	done) > ht.project/ht.tmp.all
else
    find "$HTTK_REL_DIR/" -name "ht.task.$PIPE.*" > ht.project/ht.tmp.all
fi

echo "==== Collecting data on finished tasks from computer"
cat ht.project/ht.tmp.all | "$PIPEPATH/command" "
        mkdir -p \"ht.finished/$PROJECT/\"; 
        cd \"ht.finished/$PROJECT\"; 
        while read LINE; do
	  ID=\"\$(echo \"\$LINE\" | awk -F/ '{split(\$NF,a,\".\"); print a[4]}')\"
	  DIR=\"\$(dirname \"\$LINE\")\"
	  LOCAL=\"\$(ls -d \"\$DIR/ht.task.$PIPE.\$ID\".* 2>/dev/null)\"
          #echo \"DIR: \$DIR/ht.task.$PIPE.\$ID\" >&2
          #echo \"LOCAL: \$LOCAL\" >&2
	  if [ -n \"\$LOCAL\" ]; then
             echo \"\$LOCAL\"
	  fi; 
        done
        " > ht.project/ht.tmp.sources

echo "==== Moving local files into place"
cat ht.project/ht.tmp.sources | (
    while read LINE; do
	ID=$(echo "$LINE" | awk -F/ '{split($NF,a,"."); print a[4]}')
	DIR=$(dirname "$LINE")
	LOCAL=$(ls -d "$DIR/ht.task.$PIPE.$ID".* )
	if [ -n "$LOCAL" -a "$LOCAL" != "$LINE" ]; then
	    mv "$LOCAL" "$LINE"
	fi
    done
)

echo "==== Syncronizing computer to local files"
cat ht.project/ht.tmp.sources | "$PIPEPATH/pull" "ht.finished/$PROJECT/" "./"

if [ "$?" != "0" ]; then
    echo "Pull request exited with error."
    exit 0
fi

echo "==== Removing transfered tasks from remote host"
cat ht.project/ht.tmp.sources | "$PIPEPATH/command" "
  while read LINE; do
    DIRNAME=\"\$(dirname \"\$LINE\")\"
    # Saftey code; this should ensure we don't remove completely the wrong files
    # And that breakage never leave half-removed directories
    POSTNAME=\"\$(echo \"\$LINE\" | awk -F/ '{split(\$NF,a,\".\"); print a[3] \".\" a[4] \".\" a[5] \".\" a[6] \".\" a[7] \".\" a[8] \".\" a[9]}')\"
    mkdir -p \"ht.tmp.remove/$PROJECT/\$DIRNAME\"
    mv \"ht.finished/$PROJECT/\$DIRNAME/ht.task.\$POSTNAME\" \"ht.tmp.remove/$PROJECT/\$DIRNAME/ht.tmp.task.\$POSTNAME\" 
done
rm -rf \"ht.tmp.remove\" 
"

if [ "$?" != "0" ]; then
    echo "Cleaning exited with error."
    exit 0
fi

rm -f ht.project/ht.tmp.all
rm -f ht.project/ht.tmp.sources

#"(| awk -F/ '{split(\$NF,a,\".\"); print a[4]}')\"
#%cd \"ht.finished/$PROJECT/\"; xargs -i++ find \"++\" -depth -type d -exec rmdir {} \;
#)" 
# "(cd \"ht.finished/$PROJECT/\"; xargs -i++ find \"++\" -depth -type d -exec rmdir {} \;)" 
